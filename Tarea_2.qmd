---
title: "Tarea 2. Interpolación"
author: "Zarate Macias"
format: html
editor: visual
lang: es
---


Importamos packages y funciones necesarias:

```{python}
import matplotlib.pyplot as plt
import numpy as np
import math
from scipy.interpolate import lagrange
from numpy.polynomial.polynomial import Polynomial
from scipy.interpolate import CubicSpline
```

---

::: {#exr-tarea2_1}

Sea $f(x)=e^x\,cos(x)$ y $x_0=0$

**a) Calcular y graficar los polinomios de Taylor hasta grado $n=5$.**

```{python}
#| code-fold: true
#| fig-align: "center"

f = lambda x: np.exp(x)*np.cos(x)

p_2 = lambda x: 1 + x
p_3 = lambda x: 1 + x - (1/3) * x**3 
p_4 = lambda x: 1 + x - (1/3) * x**3 - (1/6) * x**4
p_5 = lambda x: 1 + x - (1/3) * x**3 - (1/6) * x**4 - (1/30) * x**5
grados = ["Grado 2", "Grado 3", "Grado 4", "Grado 5"]

x = np.linspace(-2, 2, 500)

plt.figure(figsize = (8, 5))
plt.plot(x, f(x), label= "e^x cos(x)", color="blue", linestyle="--")

plt.plot(x, p_2(x), label="Grado 2")
plt.plot(x, p_3(x), label="Grado 3")
plt.plot(x, p_4(x), label="Grado 4")
plt.plot(x, p_5(x), label="Grado 5")

plt.title("f(x)=e^x cos(x)")
plt.xlabel ("x")
plt.ylabel ("y")
plt.axhline(0, color = "black", linewidth = 0.8, linestyle="--") #Eje x
plt.axvline(0, color = "black", linewidth = 0.8, linestyle="--") #Eje y

plt.grid()
plt.legend()
plt.show()
```

**b) Usar $P_5(0.5)$ para aproximar $f(0.5)$.**

```{python}

P_5 = lambda x: 1 + x - (1/3) * x**3 - (1/6) * x**4 - (1/30) * x**5

x_val = 0.5 
aprox_P5 = P_5(x_val)
valor_exacto = f(x_val)

print("------------------------")
print(f"Aproximación P5(0.5): {aprox_P5}")
print(f"Valor Exacto f(0.5): {valor_exacto}")
```


**c) Encontrar una cota superior para el error $|f(0.5)-P_5(0.5)|$**
```{python}
#| code-fold: true

print(f"La cota superior para el error es {132/720}")
print(f"La diferencia |f(0.5)-P_5(0.5)| = {np.abs(f(0.5)-aprox_P5)}")
print(f"¿La diferencia es menor que la cota superior? {np.abs(f(0.5)-aprox_P5)<132/720}")


```
:::

::: {#exr-tarea2_2}

Consideremos los siguientes puntos en $\mathbb{R}^2$:

\begin{equation}
\begin{array}{l|c|c|c|c|} 
\text{x} & 0 & 1 & 2 & 3 \\
\hline \text{y} & y_0 & y_1 & y_2 & y_3  
\end{array}
\end{equation}

Supongamos $y_0=1$, $y_1=2$, $y_2=0$, $y_3=3$ para ejemplificar.

**a) Encontrar y graficar los polinomios base para el polinomio de Lagrange que contiene a los puntos.**

```{python}
#| code-fold: true

val_x = [0,1,2,3]
val_y = [-3, 7, 1, -9]

L1 = lambda x: (x-val_x[1])*(x-val_x[2])*(x-val_x[3])/((val_x[0]-val_x[1])*(val_x[0]-val_x[2])*(val_x[0]-val_x[3]))

L2 = lambda x: (x-val_x[0])*(x-val_x[2])*(x-val_x[3])/((val_x[1]-val_x[0])*(val_x[1]-val_x[2])*(val_x[1]-val_x[3]))

L3 = lambda x: (x-val_x[0])*(x-val_x[1])*(x-val_x[3])/((val_x[2]-val_x[0])*(val_x[2]-val_x[1])*(val_x[2]-val_x[3]))

L4 = lambda x: (x-val_x[0])*(x-val_x[1])*(x-val_x[2])/((val_x[3]-val_x[0])*(val_x[3]-val_x[1])*(val_x[3]-val_x[2]))

xnew = np.linspace(-0.5, 3.5, 500)
x_zeros = np.zeros(len(val_x))
x_ones = np.ones(len(val_x))

plt.figure(figsize=(8,5))
plt.plot(xnew,  L1(xnew), label="L1", color="Purple")
plt.plot(xnew,  L2(xnew), label="L2", color="Yellow")
plt.plot(xnew,  L3(xnew), label="L3", color="Turquoise")
plt.plot(xnew,  L4(xnew), label="L4", color="Pink")
plt.plot(val_x, x_zeros,'o', color="black")
plt.plot(val_x, x_ones, 'o', color="black")
plt.grid()
plt.legend()
plt.show()
```

**b) Calcular y graficar el polinomio de Lagrange.**

```{python}
#| code-fold: true

p = lambda x: val_y[0]*L1(x)+ val_y[1]*L2(x) +val_y[2]*L3(x)+val_y[3]*L4(x)

plt.figure(figsize=(8,5))
plt.plot(xnew,  p(xnew), label="Polinomio", color="gray")
plt.plot(val_x,val_y, "o", ms=6, label="Datos", color="darkred")
plt.grid()
plt.legend()
plt.show()
```

:::
::: {#def-errores}
Supongamos que $p^*$ es una aproximación de $p$. El **error real** es $p-p^*$, el **error absoluto** es $|p-p^*|$ y el error relativo es

\begin{equation}
\frac{|p-p^*|}{|p|},
\end{equation}

siempre y cuando $p\neq 0$.
:::
::: {#exr-tarea2_3}

En cada inciso considera la función de valores reales y realiza lo siguiente:

i. Grafica los polinomios interpolantes de Lagrange con los puntos dados y aproxima el valor de la función y la derivada en el punto solicitado.  

ii. Grafica los splines cúbicos con frontera natural para los puntos dados y aproxima el valor de la función y la derivada en el punto solicitado.

iii. Grafica los splines cúbicos con frontera condicionada para los puntos dados y aproxima el valor de la función y la derivada en el punto solicitado.

En cada caso calcula el error real, el absoluto y el relativo.

**a) $f(x)=e^{2x}$.  Puntos: $x_0=0, x_1=0.25, x_2=0.5, x_3=0.75$.  Aproximar $f(0.43)$ y $f'(0.43)$.**

```{python}
#| code-fold: true
#| fig-align: "center"

f = lambda x: np.exp(2*x)
f_der = lambda x: 2*np.exp(2*x)
x_nodes = np.array([0,0.25,0.5,0.75])
y_nodes = f(x_nodes)

# Lagrange
poli_lagrange = lagrange(x_nodes, y_nodes)
# Spline natural
poli_spnat = CubicSpline(x_nodes, y_nodes, bc_type="natural")
# Spline condicionado
poli_spcond = CubicSpline(x_nodes, y_nodes, bc_type=((1, f_der(x_nodes[0])), (1, f_der(x_nodes[-1]))))

x_plot = np.linspace(-0.1, 0.85, 300)
plt.figure(figsize=(8,5))
plt.plot(x_plot, f(x_plot), label="f(x)")
plt.plot(x_plot, poli_lagrange(x_plot), label="Lagrange")
plt.plot(x_plot, poli_spnat(x_plot), label="Spline Natural")
plt.plot(x_plot, poli_spcond(x_plot), label="Spline Cond")
plt.plot(x_nodes, y_nodes, 'o', label="Nodos")
plt.legend()
plt.grid()
plt.show()
```

Aproximaciones y errores en $x=0.43$:

```{python}
x0 = 0.43
real = f(x0)
real_der = f_der(x0)
lag = poli_lagrange(x0)
lag_der = Polynomial(poli_lagrange).deriv()(x0)
spnat = poli_spnat(x0)
spnat_der = poli_spnat(x0, 1)
spcond = poli_spcond(x0)
spcond_der = poli_spcond(x0, 1)

print(f"f({x0}) = {real}")
print(f"Lagrange: {lag}, error abs: {abs(real-lag)}, error rel: {abs(real-lag)/abs(real)}")
print(f"Lagrange deriv: {lag_der}, error abs: {abs(real_der-lag_der)}, error rel: {abs(real_der-lag_der)/abs(real_der)}")
print(f"Spline nat: {spnat}, error abs: {abs(real-spnat)}, error rel: {abs(real-spnat)/abs(real)}")
print(f"Spline nat deriv: {spnat_der}, error abs: {abs(real_der-spnat_der)}, error rel: {abs(real_der-spnat_der)/abs(real_der)}")
print(f"Spline cond: {spcond}, error abs: {abs(real-spcond)}, error rel: {abs(real-spcond)/abs(real)}")
print(f"Spline cond deriv: {spcond_der}, error abs: {abs(real_der-spcond_der)}, error rel: {abs(real_der-spcond_der)/abs(real_der)}")
```

---

**b) $f(x)=x\,cos\,x-3x$.  Puntos: $x_0=0, x_1=0.5, x_2=1, x_3=1.5$.  Aproximar $f(0.8)$ y $f'(0.8)$.**

```{python}
#| code-fold: true
#| fig-align: "center"

f = lambda x: x*np.cos(x)-3*x
f_der = lambda x: np.cos(x)-x*np.sin(x)-3
x_nodes = np.array([0,0.5,1,1.5])
y_nodes = f(x_nodes)

poli_lagrange = lagrange(x_nodes, y_nodes)
poli_spnat = CubicSpline(x_nodes, y_nodes, bc_type="natural")
poli_spcond = CubicSpline(x_nodes, y_nodes, bc_type=((1, f_der(x_nodes[0])), (1, f_der(x_nodes[-1]))))

x_plot = np.linspace(-0.1, 1.6, 300)
plt.figure(figsize=(8,5))
plt.plot(x_plot, f(x_plot), label="f(x)")
plt.plot(x_plot, poli_lagrange(x_plot), label="Lagrange")
plt.plot(x_plot, poli_spnat(x_plot), label="Spline Natural")
plt.plot(x_plot, poli_spcond(x_plot), label="Spline Cond")
plt.plot(x_nodes, y_nodes, 'o', label="Nodos")
plt.legend()
plt.grid()
plt.show()
```

Aproximaciones y errores en $x=0.8$:

```{python}
x0 = 0.8
real = f(x0)
real_der = f_der(x0)
lag = poli_lagrange(x0)
lag_der = Polynomial(poli_lagrange).deriv()(x0)
spnat = poli_spnat(x0)
spnat_der = poli_spnat(x0, 1)
spcond = poli_spcond(x0)
spcond_der = poli_spcond(x0, 1)

print(f"f({x0}) = {real}")
print(f"Lagrange: {lag}, error abs: {abs(real-lag)}, error rel: {abs(real-lag)/abs(real)}")
print(f"Lagrange deriv: {lag_der}, error abs: {abs(real_der-lag_der)}, error rel: {abs(real_der-lag_der)/abs(real_der)}")
print(f"Spline nat: {spnat}, error abs: {abs(real-spnat)}, error rel: {abs(real-spnat)/abs(real)}")
print(f"Spline nat deriv: {spnat_der}, error abs: {abs(real_der-spnat_der)}, error rel: {abs(real_der-spnat_der)/abs(real_der)}")
print(f"Spline cond: {spcond}, error abs: {abs(real-spcond)}, error rel: {abs(real-spcond)/abs(real)}")
print(f"Spline cond deriv: {spcond_der}, error abs: {abs(real_der-spcond_der)}, error rel: {abs(real_der-spcond_der)/abs(real_der)}")
```


**c) $f(x)=log(e^x+2)$.  Puntos: $x_0=-2, x_1=-1, x_2=0, x_3=1, x_4=2$.  Aproximar $f(0.5)$ y $f'(0.5)$.**

```{python}
#| code-fold: true
#| fig-align: "center"

f = lambda x: np.log(np.exp(x)+2)
f_der = lambda x: np.exp(x)/(np.exp(x)+2)
x_nodes = np.array([-2,-1,0,1,2])
y_nodes = f(x_nodes)

poli_lagrange = lagrange(x_nodes, y_nodes)
poli_spnat = CubicSpline(x_nodes, y_nodes, bc_type="natural")
poli_spcond = CubicSpline(x_nodes, y_nodes, bc_type=((1, f_der(x_nodes[0])), (1, f_der(x_nodes[-1]))))

x_plot = np.linspace(-2.5, 2.5, 500)
plt.figure(figsize=(8,5))
plt.plot(x_plot, f(x_plot), label="f(x)")
plt.plot(x_plot, poli_lagrange(x_plot), label="Lagrange")
plt.plot(x_plot, poli_spnat(x_plot), label="Spline Natural")
plt.plot(x_plot, poli_spcond(x_plot), label="Spline Cond")
plt.plot(x_nodes, y_nodes, 'o', label="Nodos")
plt.grid()
plt.legend()
plt.show()
```

Aproximaciones y errores en $x=0.5$:

```{python}
x0 = 0.5
real = f(x0)
real_der = f_der(x0)
lag = poli_lagrange(x0)
lag_der = Polynomial(poli_lagrange).deriv()(x0)
spnat = poli_spnat(x0)
spnat_der = poli_spnat(x0, 1)
spcond = poli_spcond(x0)
spcond_der = poli_spcond(x0, 1)

print(f"f({x0}) = {real}")
print(f"Lagrange: {lag}, error abs: {abs(real-lag)}, error rel: {abs(real-lag)/abs(real)}")
print(f"Lagrange deriv: {lag_der}, error abs: {abs(real_der-lag_der)}, error rel: {abs(real_der-lag_der)/abs(real_der)}")
print(f"Spline nat: {spnat}, error abs: {abs(real-spnat)}, error rel: {abs(real-spnat)/abs(real)}")
print(f"Spline nat deriv: {spnat_der}, error abs: {abs(real_der-spnat_der)}, error rel: {abs(real_der-spnat_der)/abs(real_der)}")
print(f"Spline cond: {spcond}, error abs: {abs(real-spcond)}, error rel: {abs(real-spcond)/abs(real)}")
print(f"Spline cond deriv: {spcond_der}, error abs: {abs(real_der-spcond_der)}, error rel: {abs(real_der-spcond_der)/abs(real_der)}")
```

:::

---

::: {#exr-tarea2_4}

Se sospecha que las elevadas concentraciones de tanina en las hojas de los robles maduros inhiben el crecimiento de las larvas de la polilla invernal (*Operophtera bromata L. Geometridae*) que tanto dañan a los árboles en algunos años.  La tabla anexa contiene el peso promedio de dos muestras de larva, tomadas en los primeros 28 días después de nacimiento.  La primera muestra se crió en hojas de robles jóvenes, mientras que la segunda lo hizo en hojas maduras del mismo árbol.

a) Usa la interpolación polinomial (Lagrange) para aproximar la curva del peso promedio de cada muestra.

b) Usa splines cúbicos para aproximar la curva del peso promedio de cada muestra.

\begin{equation}
\begin{array}{l|c|c|c|c|c|c|r} 
\text{Día} & 0 & 6 & 10 & 13 & 17 & 20 & 28 \\
\hline \text{Peso promedio muestra 1 (mg)} & 6.67 & 17.33 & 42.67 & 37.33 & 30.10 & 29.31 & 28.74 \\
\text{Peso promedio muestra 2 (mg)} & 6.67 & 16.11 & 18.89 & 15.00 & 10.56 & 9.44 & 8.89
\end{array}
\end{equation}

```{python}
#| code-fold: true
#| fig-align: "center"

dias = np.array([0,6,10,13,17,20,28])
muestra1 = np.array([6.67,17.33,42.67,37.33,30.10,29.31,28.74])
muestra2 = np.array([6.67,16.11,18.89,15.00,10.56,9.44,8.89])

# Lagrange
lag1 = lagrange(dias, muestra1)
lag2 = lagrange(dias, muestra2)
# Splines
sp1 = CubicSpline(dias, muestra1, bc_type="natural")
sp2 = CubicSpline(dias, muestra2, bc_type="natural")

dias_plot = np.linspace(0,28,300)
plt.figure(figsize=(8,5))
plt.plot(dias_plot, lag1(dias_plot), label="Lagrange muestra 1")
plt.plot(dias_plot, lag2(dias_plot), label="Lagrange muestra 2")
plt.plot(dias_plot, sp1(dias_plot), '--', label="Spline muestra 1")
plt.plot(dias_plot, sp2(dias_plot), '--', label="Spline muestra 2")
plt.plot(dias, muestra1, 'o', label="Datos muestra 1")
plt.plot(dias, muestra2, 's', label="Datos muestra 2")
plt.xlabel("Día")
plt.ylabel("Peso promedio (mg)")
plt.legend()
plt.grid()
plt.title("Interpolación polinomial y spline de los datos de larvas")
plt.show()
```

:::

---

::: {#exr-tarea2_5}

Considera la siguiente tabla de datos para el agua:

\begin{equation}
\begin{array}{|l|c|c|c|c|c|} 
\hline \text{T(°C)} & 50 & 60 & 65 & 75 & 80\\
 \text{$\rho (kg/m^3)$} & 988 & 985.7 & 980.5 & 974.8 & 971.6  \\
\hline
\end{array}
\end{equation}

a) Hacer la representación gráfica del spline cúbico y compararlo con el polinomio interpolante $P_4(x)$.

b) Aproximar la densidad para $T=63 °C$ y también la derivada.

```{python}
#| code-fold: true
#| fig-align: "center"

T = np.array([50,60,65,75,80])
rho = np.array([988,985.7,980.5,974.8,971.6])

lag = lagrange(T, rho)
sp = CubicSpline(T, rho, bc_type="natural")

T_plot = np.linspace(50,80,300)
plt.figure(figsize=(8,5))
plt.plot(T_plot, lag(T_plot), label="Lagrange")
plt.plot(T_plot, sp(T_plot), '--', label="Spline cúbico")
plt.plot(T, rho, 'o', label="Datos")
plt.xlabel("Temperatura (°C)")
plt.ylabel("Densidad (kg/m³)")
plt.legend()
plt.grid()
plt.title("Interpolación de la densidad del agua")
plt.show()
```

Aproximación en $T=63$:

```{python}
T0 = 63
real = None # No se conoce el valor real
lag_aprox = lag(T0)
sp_aprox = sp(T0)
sp_der = sp(T0, 1)
print(f"Lagrange: {lag_aprox}")
print(f"Spline cúbico: {sp_aprox}")
print(f"Derivada del spline en T=63: {sp_der}")
```

:::

---

::: {#exr-tarea2_6}

Llevar a cabo lo siguiente:

i. Genera una sucesión desde 0 hasta 10 con la función `np.arange` y asígnalo a la variable $x$.

ii. Del conjunto $\{-25, -24, \dots, 24, 25\}\subset\mathbb{Z}$ toma una muestra con reemplazo que tenga la misma cantidad de elementos de $x$ y asígnalo a la variable $y$ (utilizar la función `np.random.choice`).  

iii. Encuentra el spline cúbico que que contiene a los puntos generados.

```{python}
#| code-fold: true
#| fig-align: "center"

x = np.arange(0,11)
y = np.random.choice(np.arange(-25,26), size=len(x), replace=True)
sp = CubicSpline(x, y, bc_type="natural")

x_plot = np.linspace(0,10,300)
plt.figure(figsize=(8,5))
plt.plot(x, y, 'o', label="Datos")
plt.plot(x_plot, sp(x_plot), label="Spline cúbico")
plt.xlabel("x")
plt.ylabel("y")
plt.legend()
plt.grid()
plt.title("Spline cúbico de datos aleatorios")
plt.show()
```

:::

---

::: {#exr-tarea2_7}

Construye los splines cúbicos condicionados en $n$ nodos, donde $n= 4,5, 10, 20$ para las siguientes funciones en el intervalo dado. Con el de $n=20$ nodos calcula la diferencia máxima entre la función y el spline tomando 500 puntos distribuidos de manera uniforme en el intervalo.

**a) $f(x) = e^{2x}\, cos 3x$, $[0,2]$.**

```{python}
#| code-fold: true
#| fig-align: "center"

f = lambda x: np.exp(2*x)*np.cos(3*x)
f_der = lambda x: 2*np.exp(2*x)*np.cos(3*x) - 3*np.exp(2*x)*np.sin(3*x)

for n in [4,5,10,20]:
    x_nodes = np.linspace(0,2,n)
    y_nodes = f(x_nodes)
    sp = CubicSpline(x_nodes, y_nodes, bc_type=((1, f_der(x_nodes[0])), (1, f_der(x_nodes[-1]))))
    x_plot = np.linspace(0,2,500)
    plt.figure(figsize=(8,5))
    plt.plot(x_plot, f(x_plot), label="f(x)")
    plt.plot(x_plot, sp(x_plot), label=f"Spline n={n}")
    plt.plot(x_nodes, y_nodes, 'o', label="Nodos")
    plt.legend()
    plt.grid()
    plt.title(f"Spline condicionado con n={n}")
    plt.show()
    if n==20:
        max_diff = np.max(np.abs(f(x_plot)-sp(x_plot)))
        print(f"Diferencia máxima (n=20): {max_diff}")
```

---

**b) $f(x) = \sin(\log x)$, $[1,10]$.**

```{python}
#| code-fold: true
#| fig-align: "center"

f = lambda x: np.sin(np.log(x))
f_der = lambda x: np.cos(np.log(x))/x

for n in [4,5,10,20]:
    x_nodes = np.linspace(1,10,n)
    y_nodes = f(x_nodes)
    sp = CubicSpline(x_nodes, y_nodes, bc_type=((1, f_der(x_nodes[0])), (1, f_der(x_nodes[-1]))))
    x_plot = np.linspace(1,10,500)
    plt.figure(figsize=(8,5))
    plt.plot(x_plot, f(x_plot), label="f(x)")
    plt.plot(x_plot, sp(x_plot), label=f"Spline n={n}")
    plt.plot(x_nodes, y_nodes, 'o', label="Nodos")
    plt.legend()
    plt.grid()
    plt.title(f"Spline condicionado con n={n}")
    plt.show()
    if n==20:
        max_diff = np.max(np.abs(f(x_plot)-sp(x_plot)))
        print(f"Diferencia máxima (n=20): {max_diff}")
```

---

**c) $f(x) = e^{x}+e^{-x}$, $[0,3]$.**

```{python}
#| code-fold: true
#| fig-align: "center"

f = lambda x: np.exp(x)+np.exp(-x)
f_der = lambda x: np.exp(x)-np.exp(-x)

for n in [4,5,10,20]:
    x_nodes = np.linspace(0,3,n)
    y_nodes = f(x_nodes)
    sp = CubicSpline(x_nodes, y_nodes, bc_type=((1, f_der(x_nodes[0])), (1, f_der(x_nodes[-1]))))
    x_plot = np.linspace(0,3,500)
    plt.figure(figsize=(8,5))
    plt.plot(x_plot, f(x_plot), label="f(x)")
    plt.plot(x_plot, sp(x_plot), label=f"Spline n={n}")
    plt.plot(x_nodes, y_nodes, 'o', label="Nodos")
    plt.legend()
    plt.grid()
    plt.title(f"Spline condicionado con n={n}")
    plt.show()
    if n==20:
        max_diff = np.max(np.abs(f(x_plot)-sp(x_plot)))
        print(f"Diferencia máxima (n=20): {max_diff}")
```

---

**d) $f(x) = \cos x+\sin x$, $[0,2\pi]$.**

```{python}
#| code-fold: true
#| fig-align: "center"

f = lambda x: np.cos(x)+np.sin(x)
f_der = lambda x: -np.sin(x)+np.cos(x)

for n in [4,5,10,20]:
    x_nodes = np.linspace(0,2*np.pi,n)
    y_nodes = f(x_nodes)
    sp = CubicSpline(x_nodes, y_nodes, bc_type=((1, f_der(x_nodes[0])), (1, f_der(x_nodes[-1]))))
    x_plot = np.linspace(0,2*np.pi,500)
    plt.figure(figsize=(8,5))
    plt.plot(x_plot, f(x_plot), label="f(x)")
    plt.plot(x_plot, sp(x_plot), label=f"Spline n={n}")
    plt.plot(x_nodes, y_nodes, 'o', label="Nodos")
    plt.legend()
    plt.grid()
    plt.title(f"Spline condicionado con n={n}")
    plt.show()
    if n==20:
        max_diff = np.max(np.abs(f(x_plot)-sp(x_plot)))
        print(f"Diferencia máxima (n=20): {max_diff}")
```

:::
